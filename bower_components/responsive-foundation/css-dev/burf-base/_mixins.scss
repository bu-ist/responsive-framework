/* mixins
----------------------------------------------------------------- */

// clearfix
// Usage: @include clearfix
@mixin clearfix {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

// border-radius
// Usage: @include border-radius(3px)
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	   -moz-border-radius: $radius;
		-ms-border-radius: $radius;
			border-radius: $radius;
}

// box-shadow
// Usage: @include box-shadow(0 0 1px 3px #000000)
@mixin box-shadow($shadow) {
	-webkit-box-shadow: $shadow;
	   -moz-box-shadow: $shadow;
		-ms-box-shadow: $shadow;
		 -o-box-shadow: $shadow;
			box-shadow: $shadow;
}

// hide text. Uses Sass placeholder selector (%).
// Usage: @extend hide-text
%hide-text {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}

// cross-browser opacity
// Usage: @include opacity(0.5)
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// transition
// Usage: @include transition(all, 250ms, ease-in-out, 0s)
@mixin transition($transition-property, $transition-time, $method, $transition-delays) {
	-webkit-transition: $transition-property $transition-time $method $transition-delays;
	   -moz-transition: $transition-property $transition-time $method $transition-delays;
		-ms-transition: $transition-property $transition-time $method $transition-delays;
		 -o-transition: $transition-property $transition-time $method $transition-delays;
			transition: $transition-property $transition-time $method $transition-delays;
}

// transform
@mixin transform($transforms) {
	-webkit-transform: $transforms;
	   -moz-transform: $transforms;
		-ms-transform: $transforms;
		 -o-transform: $transforms;
			transform: $transforms;
}
// transform: rotate
@mixin rotate($deg) {
	@include transform(rotate(#{$deg}deg));
}

// transform: scale
@mixin scale($scale) {
	@include transform(scale($scale));
}
// transform: translate
@mixin translate($x, $y) {
	@include transform(translate($x, $y));
}
// transform: transform-origin
@mixin transform-origin($origin) {
	-webkit-transform-origin: $origin;
	   -moz-transform-origin: $origin;
		-ms-transform-origin: $origin;
		 -o-transform-origin: $origin;
			transform-origin: $origin;
}

// keyframes
@mixin keyframes($animation-name) {
	@-webkit-keyframes $animation-name {
		@content;
	}
	@-moz-keyframes $animation-name {
		@content;
	}
	@-ms-keyframes $animation-name {
		@content;
	}
	@-o-keyframes $animation-name {
		@content;
	}
	@keyframes $animation-name {
		@content;
	}
}
// animation
@mixin animation($str) {
	-webkit-animation: #{$str};
	   -moz-animation: #{$str};
		-ms-animation: #{$str};
		 -o-animation: #{$str};
			animation: #{$str};      
}
// vertical-center: a more IE-friendly version of vertical center. Apply "vertical-center-child" to a parent element and "vertical-center" to the child
// Usage: @include vertical-center-child
@mixin vertical-center-child {
	.lt-ie9 & {
		display:table;
	}
	.lt-ie9 & > * {
		display:table-cell;
		top:auto;
		vertical-align:middle;
	}
	& > * {
		display:block;
		position: relative;
		top: 50%;
		-webkit-transform: translateY(-50%);
		   -moz-transform: translateY(-50%);
			-ms-transform: translateY(-50%);
				transform: translateY(-50%);
	}
}
// Usage: @include vertical-center
@mixin vertical-center {
	position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
	   -moz-transform: translateY(-50%);
		-ms-transform: translateY(-50%);
			transform: translateY(-50%);
	.lt-ie9 & {
		top:auto;
	}
}
// Hide elements visually but not from screen readers. Great for accessibility hints like skip to content. Uses Sass placeholder selector (%).
// Usage: @extend %visuallyhidden
%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

// If primary stylesheet indicates media query support (e.g. style.scss), output media queries. If not (e.g. ie.scss), output the block WITHOUT @media wrapper.
// Usage: @include breakpoint(medium) {...}
@mixin breakpoint($point) {
	@if ($MQs) {
		@if ($point == extra_small) {
			@media (min-width:$XS) {
				@content;
			}
		}
		@if ($point == small) {
			@media (min-width:$S) {
				@content;
			}
		}
		@if ($point == medium) {
			@media (min-width:$M) {
				@content;
			}
		}
		@if ($point == large) {
			@media (min-width:$L) {
				@content;
			}
		}
	}
	@else {
		@if ($point == large) {
			// ie8 and large desktop output nothing
		}
		@else {
			@content;
		}
	}
}

// Media query for retina images
// Usage: @include retina {...}
@mixin retina {
	@media
		only screen and (-webkit-min-device-pixel-ratio: 2),
		only screen and (   min--moz-device-pixel-ratio: 2),
		only screen and (     -o-min-device-pixel-ratio: 2/1),
		only screen and (        min-device-pixel-ratio: 2),
		only screen and (                min-resolution: 192dpi),
		only screen and (                min-resolution: 2dppx) {
			@content;
	}
}

// Same as @mixin mq($point), except allows a longer string of media query conditions, e.g. min-width and max-width, or multiple DPI checkers
@mixin breakpoint-multiple($points) {
	// If primary stylesheet indicates media query support (e.g. style.scss), output media queries. If not (e.g. ie.scss), output the block WITHOUT @media wrapper.
	@if ($MQs) {
		 @media only screen and #{$points} {
			 @content;
		 }
	} @else {
		@content;
	}
}

// Mixin to generate RGBA colors for any style with a fallback for non-rgba browsers such as IE8.
// Usage: @include rgba-color('background-color', rgba(black, 0.5), white);
@mixin rgba-color($attribute, $color, $background) {
	$percent: alpha($color) * 100%;
	$opaque: opacify($color, 1);
	$solid-color: mix($opaque, $background, $percent);
	#{$attribute}: $solid-color;
	#{$attribute}: $color;
}